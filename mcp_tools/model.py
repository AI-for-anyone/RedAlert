from typing import List, Dict, Optional
from OpenRA_Copilot_Library.models import Location
from dataclasses import dataclass

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from logs import logger

ALL_INFANTRIES = ["步兵", "火箭兵"]
ALL_TANKS = ["防空车", "重型坦克", "V2火箭发射车","超重型坦克"]
ALL_AIR = ["雅克战机", "米格战机"]
ALL_TOWER = ["火焰塔", "特斯拉塔"]
ALL_BUILDING = ["建造厂", "发电厂", "兵营", "矿场", "战车工厂", "雷达站", "维修厂", "核电站", "科技中心", "空军基地"] + ALL_TOWER
FIGHT_UNITS = ALL_INFANTRIES + ALL_TANKS + ALL_AIR
ALL_DIRECTIONS = ["左上", "上", "右上", "左", "右", "左下", "下", "右下"]

arms_restraint_priority: Dict[str, Dict[str, float]] = {
    "步兵": {"步兵": 70, "火箭兵": 100, "采矿车": 10, "防空车": 10, "重型坦克": 10, "V2火箭发射车": 10, "超重型坦克": 10, "雅克战机": 10, "米格战机": 10, "建造厂": 3, "发电厂": 3, "兵营": 3, "矿场": 3, "战车工厂": 3, "雷达站": 3, "维修厂": 3, "核电站": 3, "科技中心": 3, "空军基地": 3, "火焰塔": 10, "特斯拉塔": 10},
    "火箭兵": {"步兵": 10, "火箭兵": 10, "采矿车": 10, "防空车": 20, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 20, "米格战机": 20, "建造厂": 3, "发电厂": 3, "兵营": 3, "矿场": 3, "战车工厂": 3, "雷达站": 3, "维修厂": 3, "核电站": 3, "科技中心": 3, "空军基地": 3, "火焰塔": 10, "特斯拉塔": 10},
    "防空车": {"步兵": 20, "火箭兵": 20, "采矿车": 10, "防空车": 30, "重型坦克": 10, "V2火箭发射车": 50, "超重型坦克": 40, "雅克战机": 50, "米格战机": 50, "建造厂": 3, "发电厂": 3, "兵营": 3, "矿场": 3, "战车工厂": 3, "雷达站": 3, "维修厂": 3, "核电站": 3, "科技中心": 3, "空军基地": 3, "火焰塔": 10, "特斯拉塔": 10},
    "重型坦克": {"步兵": 10, "火箭兵": 20, "采矿车": 10, "防空车": 10, "重型坦克": 10, "V2火箭发射车": 10, "超重型坦克": 10, "雅克战机": 0, "米格战机": 0, "建造厂": 3, "发电厂": 3, "兵营": 3, "矿场": 3, "战车工厂": 3, "雷达站": 3, "维修厂": 3, "核电站": 3, "科技中心": 3, "空军基地": 3, "火焰塔": 10, "特斯拉塔": 10},
    "V2火箭发射车": {"步兵": 30, "火箭兵": 35, "采矿车": 10, "防空车": 10, "重型坦克": 30, "V2火箭发射车": 30, "超重型坦克": 30, "雅克战机": 0, "米格战机": 0, "建造厂": 3, "发电厂": 3, "兵营": 3, "矿场": 3, "战车工厂": 3, "雷达站": 3, "维修厂": 3, "核电站": 3, "科技中心": 3, "空军基地": 3, "火焰塔": 20, "特斯拉塔": 30},
    "超重型坦克": {"步兵": 10, "火箭兵": 20, "采矿车": 10, "防空车": 20, "重型坦克": 30, "V2火箭发射车": 30, "超重型坦克": 30, "雅克战机": 0, "米格战机": 0, "建造厂": 3, "发电厂": 3, "兵营": 3, "矿场": 3, "战车工厂": 3, "雷达站": 3, "维修厂": 3, "核电站": 3, "科技中心": 3, "空军基地": 3, "火焰塔": 10, "特斯拉塔": 10},
    "雅克战机": {"步兵": 10, "火箭兵": 10, "采矿车": 10, "防空车": 10, "重型坦克": 10, "V2火箭发射车": 10, "超重型坦克": 10, "雅克战机": 10, "米格战机": 10, "建造厂": 3, "发电厂": 3, "兵营": 3, "矿场": 3, "战车工厂": 3, "雷达站": 3, "维修厂": 3, "核电站": 3, "科技中心": 3, "空军基地": 3, "火焰塔": 10, "特斯拉塔": 10},
    "米格战机": {"步兵": 10, "火箭兵": 10, "采矿车": 10, "防空车": 10, "重型坦克": 10, "V2火箭发射车": 10, "超重型坦克": 10, "雅克战机": 10, "米格战机": 10, "建造厂": 3, "发电厂": 3, "兵营": 3, "矿场": 3, "战车工厂": 3, "雷达站": 3, "维修厂": 3, "核电站": 3, "科技中心": 3, "空军基地": 3, "火焰塔": 10, "特斯拉塔": 10}
}

damage_info: Dict[str, Dict[str, float]] = {
    "步兵": {"步兵": 1500, "火箭兵": 1500, "防空车": 400, "采矿车": 100, "重型坦克": 100, "V2火箭发射车": 400, "超重型坦克": 100, "雅克战机": 400, "米格战机": 400,  "建造厂": 300, "发电厂": 300, "兵营": 300, "矿场": 300, "战车工厂": 300, "雷达站": 300, "维修厂": 300, "核电站": 300, "科技中心": 300, "空军基地": 300, "火焰塔": 100, "特斯拉塔": 100},
    "火箭兵": {"步兵": 500, "火箭兵": 500, "防空车": 1700, "采矿车": 5000, "重型坦克": 5000, "V2火箭发射车": 1700, "超重型坦克": 5000, "雅克战机": 2400, "米格战机": 2400,  "建造厂": 3700, "发电厂": 3700, "兵营": 3700, "矿场": 3700, "战车工厂": 3700, "雷达站": 3700, "维修厂": 3700, "核电站": 3700, "科技中心": 3700, "空军基地": 3700, "火焰塔": 5000, "特斯拉塔": 5000},
    "防空车": {"步兵": 800, "火箭兵": 800, "防空车": 1200, "采矿车": 200, "重型坦克": 200, "V2火箭发射车": 1200, "超重型坦克": 200, "雅克战机": 1200, "米格战机": 1200,  "建造厂": 200, "发电厂": 200, "兵营": 200, "矿场": 200, "战车工厂": 200, "雷达站": 200, "维修厂": 200, "核电站": 200, "科技中心": 200, "空军基地": 200, "火焰塔": 200, "特斯拉塔": 200},
    "重型坦克": {"步兵": 1200, "火箭兵": 1200, "防空车": 3000, "采矿车": 4600, "重型坦克": 4600, "V2火箭发射车": 3000, "超重型坦克": 4600, "雅克战机": 0, "米格战机": 0,  "建造厂": 3000, "发电厂": 3000, "兵营": 3000, "矿场": 3000, "战车工厂": 3000, "雷达站": 3000, "维修厂": 3000, "核电站": 3000, "科技中心": 3000, "空军基地": 3000, "火焰塔": 4600, "特斯拉塔": 4600},
    "V2火箭发射车": {"步兵": 4050, "火箭兵": 4050, "防空车": 3150, "采矿车": 1800, "重型坦克": 1800, "V2火箭发射车": 3150, "超重型坦克": 1800, "雅克战机": 0, "米格战机": 0,  "建造厂": 3375, "发电厂": 3375, "兵营": 3375, "矿场": 3375, "战车工厂": 3375, "雷达站": 3375, "维修厂": 3375, "核电站": 3375, "科技中心": 3375, "空军基地": 3375, "火焰塔": 1800, "特斯拉塔": 1800},
    "超重型坦克": {"步兵": 1800, "火箭兵": 1800, "防空车": 4500, "采矿车": 6900, "重型坦克": 6900, "V2火箭发射车": 4500, "超重型坦克": 6900, "雅克战机": 0, "米格战机": 0, "建造厂": 4500, "发电厂": 4500, "兵营": 4500, "矿场": 4500, "战车工厂": 4500, "雷达站": 4500, "维修厂": 4500, "核电站": 4500, "科技中心": 4500, "空军基地": 4500, "火焰塔": 6900, "特斯拉塔": 6900},
    "雅克战机": {"步兵": 4000, "火箭兵": 4000, "防空车": 2400, "采矿车": 1000, "重型坦克": 1000, "V2火箭发射车": 2400, "超重型坦克": 1000, "雅克战机": 2400, "米格战机": 2400,  "建造厂": 2000, "发电厂": 2000, "兵营": 2000, "矿场": 2000, "战车工厂": 2000, "雷达站": 2000, "维修厂": 2000, "核电站": 2000, "科技中心": 2000, "空军基地": 2000, "火焰塔": 1000, "特斯拉塔": 1000},
    "米格战机": {"步兵": 2100, "火箭兵": 2100, "防空车": 6300, "采矿车": 8050, "重型坦克": 8050, "V2火箭发射车": 6300, "超重型坦克": 8050, "雅克战机": 6300, "米格战机": 6300, "建造厂": 6300, "发电厂": 6300, "兵营": 6300, "矿场": 6300, "战车工厂": 6300, "雷达站": 6300, "维修厂": 6300, "核电站": 6300, "科技中心": 6300, "空军基地": 6300, "火焰塔": 8050, "特斯拉塔": 8050 }
}


distance_info: Dict[str, Dict[str, float]] = {
    "步兵": {"步兵": 50, "火箭兵": 50, "防空车": 50, "采矿车": 50, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 50, "米格战机": 50},
    "火箭兵": {"步兵": 50, "火箭兵": 50, "防空车": 50, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 75, "米格战机": 75},
    "防空车": {"步兵": 50, "火箭兵": 70, "防空车": 50, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 50, "米格战机": 50},
    "重型坦克": {"步兵": 50, "火箭兵": 70, "防空车": 50, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 50, "米格战机": 50},
    "V2火箭发射车": {"步兵": 50, "火箭兵": 70, "防空车": 50, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 50, "米格战机": 50},
    "超重型坦克": {"步兵": 50, "火箭兵": 70, "防空车": 50, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 50, "米格战机": 50},
    "雅克战机": {"步兵": 50, "火箭兵": 70, "防空车": 50, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 50, "米格战机": 50},
    "米格战机": {"步兵": 50, "火箭兵": 70, "防空车": 50, "重型坦克": 50, "V2火箭发射车": 50, "超重型坦克": 50, "雅克战机": 50, "米格战机": 50},
}

def get_target_priority(source: str, target: str) -> float:
    if source not in arms_restraint_priority.keys() or target not in arms_restraint_priority[source].keys():
        return 0.1
    return arms_restraint_priority[source][target]

import math
def gaussian_peak(x, A=1.0):
    # 使用预计算好的常数，避免每次调用 log(2)
    return A * math.exp(-2.774 * (x - 0.5) ** 2)

@dataclass
class enemy_unit:
    actor_id: int
    type: str 
    position: Location
    hp: int
    max_hp: int
    assigned_attack_units: List[int]
    def __init__(self, actor_id: int, type: str, position: Location, hp: int, max_hp: int, assigned_attack_units: List[int]):
        self.actor_id = actor_id
        self.type = type
        self.position = position
        self.hp = hp
        self.max_hp = max_hp
        self.assigned_attack_units = assigned_attack_units

class own_unit:
    actor_id: int
    type: str 
    position: Location
    hp: int
    max_hp: int
    target: Optional[int] = None
    retreated: bool = False
    def __init__(self, actor_id: int, type: str, position: Location, hp: int, max_hp: int):
        self.actor_id = actor_id
        self.type = type
        self.position = position
        self.hp = hp
        self.max_hp = max_hp

def id2type(dict: Dict[int, own_unit], actor_id: int) -> str:
    if actor_id not in dict.keys():
        return ""
    return dict[actor_id].type

def effective_damage_score(
    source_unit: own_unit, 
    target_unit: enemy_unit, 
    source_dict: Dict[int, own_unit],
    perfer_type: Dict[str, float]|None = None
)  -> float:
    score = 0
    type_score = arms_restraint_priority[source_unit.type][target_unit.type]

    damage = 0
    for actor_id in target_unit.assigned_attack_units:
        if actor_id not in source_dict.keys():
            score += 0
            continue
        damage += damage_info[source_dict[actor_id].type][target_unit.type]
    damage += damage_info[source_unit.type][target_unit.type]

    percent = damage / target_unit.hp
    percent_score = gaussian_peak(percent)

    try:
        distance_parm = distance_info[source_unit.type][target_unit.type]
    except Exception:
        distance_parm = 50
    distance = source_unit.position.euclidean_distance(target_unit.position)
    distance_score = distance_parm / (distance_parm + distance)
    
    result = type_score * percent_score * distance_score
    if perfer_type is not None and target_unit.type in perfer_type.keys():
        result*= perfer_type[target_unit.type]
    return result
        
        